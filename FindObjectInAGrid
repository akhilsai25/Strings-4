// This algorithm aims at doing a binary search on first row to fing the hottest pointer
// Once we find it, we scan through that column with binary search again to get to the exact location
package FindObjectInGrid;

public class FindObjectInGrid {

    // Assuming the method public Response getResponse(int row, int col)

    private static int[] findHottest(int[][] grid) {
        int i=0, j=grid[0].length-1;

        int hottestInRow;

        while(i<j) {
            int mid = i+(j-i)/2;
            Hotness hotness = getResponse(0, mid+1);
            if(hotness==Hotness.EXACT) {
                return new int[]{0, mid+1};
            } else if(hotness==Hotness.HOTTER) {
                i=mid+1;
            } else if((hotness==Hotness.COLDER)) {
                j=i;
            }
            // SAME not possible
        }

        hottestInRow = i;
        i=0;
        j=grid.length-1;

        while(i<j) {
            int mid = i+(j-i)/2;
            Hotness hotness = getResponse(mid+1, hottestInRow);
            if(hotness==Hotness.EXACT) {
                return new int[]{mid+1, hottestInRow};
            } else if(hotness==Hotness.HOTTER) {
                i=mid+1;
            } else if((hotness==Hotness.COLDER)) {
                j=i;
            }
            // SAME not possible
        }

        return new int[]{i, hottestInRow};
    }

    public enum Hotness {
        HOTTER,
        COLDER,
        SAME,
        EXACT
    }


    public static void main(String[] args) {
        int[][] grid = {
                {'o', 'o', 'o'},
                {'o', 'o', 'o'},
                {'o', 'o', 'o'},
                {'o', 'o', 'o'},
                {'o', 'o', 'x'}
        };

        int[] ans = findHottest(grid);
        System.out.println("Object found at: [" + ans[0] + ", " + ans[1] + "]");
    }
}


